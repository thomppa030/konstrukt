---
# Designed for professional, production-ready codebases with industry best practices
Checks: "*, \
  -google-readability-todo,\
  -altera-*,\
  -fuchsia-*,\
  fuchsia-multiple-inheritance,\
  -llvm-header-guard,\
  -llvm-include-order,\
  -llvmlibc-*,\
  -modernize-use-nodiscard,\
  -misc-non-private-member-variables-in-classes"

WarningsAsErrors: '
  clang-analyzer-*,\
  bugprone-*,\
  cert-*,\
  cppcoreguidelines-*,\
  performance-*,\
  portability-*,\
  readability-identifier-naming*,
  readability-*,\
  -readability-magic-numbers,\
  -readability-identifier-length,\
  -cppcoreguidelines-avoid-magic-numbers,\
  -bugprone-easily-swappable-parameters'

CheckOptions:
  # ===== Memory Safety and Resource Management =====
  # Modern C++ memory safety practices
  - key: 'cppcoreguidelines-no-malloc.Allocations'
    value: '::malloc;::calloc;::realloc;::free'
  - key: 'cppcoreguidelines-owning-memory.LegacyResourceConsumers'
    value: '::free;::realloc;::freopen;::fclose'
  - key: 'cppcoreguidelines-owning-memory.LegacyResourceProducers'
    value: '::malloc;::calloc;::realloc;::freopen;::fopen'
  - key: 'performance-move-const-arg.CheckTriviallyCopyableMove'
    value: 'true'
  - key: 'performance-move-constructor-init.IncludeStyle'
    value: 'llvm'
  - key: 'performance-type-promotion-in-math-fn.IncludeStyle'
    value: 'llvm'
  - key: 'performance-unnecessary-copy-initialization.AllowedTypes'
    value: ''
  - key: 'performance-unnecessary-value-param.AllowedTypes'
    value: 'shared_ptr;unique_ptr;function'
  - key: 'cppcoreguidelines-init-variables.MathHeader'
    value: '<cmath>'
  # ===== Reliability and Bug Prevention =====
  # Code pattern detection to prevent common bugs
  - key: 'bugprone-argument-comment.StrictMode'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentBoolLiterals'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentIntegerLiterals'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentFloatLiterals'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentStringLiterals'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentUserDefinedLiterals'
    value: 'true'
  - key: 'bugprone-argument-comment.CommentNullPtrs'
    value: 'true'
  - key: 'bugprone-misplaced-widening-cast.CheckImplicitCasts'
    value: 'true'
  - key: 'bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression'
    value: 'true'
  - key: 'bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant'
    value: 'true'
  - key: 'bugprone-sizeof-expression.WarnOnSizeOfThis'
    value: 'true'
  - key: 'bugprone-string-constructor.LargeLengthThreshold'
    value: '8388608'
  - key: 'bugprone-suspicious-enum-usage.StrictMode'
    value: 'true'
  - key: 'bugprone-suspicious-missing-comma.SizeThreshold'
    value: '5'
  - key: 'bugprone-suspicious-string-compare.WarnOnImplicitComparison'
    value: 'true'
  - key: 'bugprone-suspicious-string-compare.WarnOnLogicalNotComparison'
    value: 'true'
  - key: 'bugprone-unused-return-value.CheckedFunctions'
    value: '::std::async;::std::launder;::std::remove;::std::remove_if;::std::unique;::std::unique_ptr::release;::std::basic_string::empty;::std::vector::empty;::std::back_inserter;::std::distance;::std::find;::std::find_if;::std::inserter;::std::lower_bound;::std::make_pair;::std::map::count;::std::map::find;::std::map::lower_bound;::std::multimap::equal_range;::std::multimap::upper_bound;::std::set::count;::std::set::find;::std::setfill;::std::setprecision;::std::setw;::std::upper_bound;::std::vector::at;::std::fill;::std::fill_n;::std::copy;::std::all_of;::std::any_of;::std::none_of;::std::accumulate;::std::count;::std::count_if'
  - key: 'cppcoreguidelines-explicit-virtual-functions.AllowOverrideAndFinal'
    value: 'true'
  - key: 'cppcoreguidelines-macro-usage.AllowedRegexp'
    value: '^DEBUG_|^SAFETY_CHECK_|^ASSERT_|^COMPILER_|^PLATFORM_'
  - key: 'cppcoreguidelines-narrowing-conversions.PedanticMode'
    value: 'true'
  - key: 'cppcoreguidelines-narrowing-conversions.WarnOnIntegerNarrowingConversion'
    value: 'true'
  - key: 'cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic'
    value: 'true'
  - key: 'cppcoreguidelines-pro-type-member-init.UseAssignment'
    value: 'false'
  # ===== Code Clarity and Readability =====
  # Advanced readability options for cleaner code
  - key: 'modernize-loop-convert.MaxCopySize'
    value: '16'
  - key: 'modernize-loop-convert.MinConfidence'
    value: 'reasonable'
  - key: 'modernize-pass-by-value.IncludeStyle'
    value: 'llvm'
  - key: 'modernize-replace-auto-ptr.IncludeStyle'
    value: 'llvm'
  - key: 'modernize-use-nullptr.NullMacros'
    value: 'NULL'
  - key: 'readability-identifier-naming'
    value: 'true'
  - key: 'readability-identifier-naming.GetConfigPerFile'
    value: 'true'
  - key: 'readability-braces-around-statements.ShortStatementLines'
    value: '0'
  - key: 'readability-else-after-return.WarnOnUnfixable'
    value: 'true'
  - key: 'readability-else-after-return.WarnOnConditionVariables'
    value: 'true'
  - key: 'readability-function-cognitive-complexity.IgnoreMacros'
    value: 'true'
  - key: 'readability-function-cognitive-complexity.Threshold'
    value: '50'
  - key: 'readability-function-size.StatementThreshold'
    value: '70'
  - key: 'readability-function-size.ParameterThreshold'
    value: '5'
  - key: 'readability-function-size.NestingThreshold'
    value: '8'
  - key: 'readability-function-size.LineThreshold'
    value: '100'
  - key: 'readability-identifier-naming.IgnoreFailedSplit'
    value: 'false'
  - key: 'readability-implicit-bool-conversion.AllowIntegerConditions'
    value: 'false'
  - key: 'readability-implicit-bool-conversion.AllowPointerConditions'
    value: 'false'
  - key: 'readability-inconsistent-declaration-parameter-name.Strict'
    value: 'true'
  - key: 'readability-simplify-boolean-expr.ChainedConditionalReturn'
    value: 'true'
  - key: 'readability-simplify-boolean-expr.ChainedConditionalAssignment'
    value: 'true'
  - key: 'readability-simplify-subscript-expr.Types'
    value: '::std::array;::std::vector;::std::span'
  - key: 'readability-uniqueptr-delete-release.PreferResetCall'
    value: 'true'
  - key: 'readability-qualified-auto.AddConstToQualified'
    value: 'true'
  - key: 'readability-redundant-access-specifiers.CheckFirstDeclaration'
    value: 'true'
  # ===== Standard Library Usage =====
  # Enforce modern standard library idioms
  - key: 'modernize-avoid-bind.PermissiveParameterList'
    value: 'false'
  - key: 'modernize-deprecated-headers.CheckHeaderFile'
    value: 'true'
  - key: 'modernize-make-shared.IgnoreDefaultInitialization'
    value: 'true'
  - key: 'modernize-make-shared.IncludeStyle'
    value: 'llvm'
  - key: 'modernize-make-shared.MakeSmartPtrFunction'
    value: 'std::make_shared'
  - key: 'modernize-make-shared.MakeSmartPtrFunctionHeader'
    value: 'memory'
  - key: 'modernize-make-unique.IgnoreDefaultInitialization'
    value: 'true'
  - key: 'modernize-make-unique.IncludeStyle'
    value: 'llvm'
  - key: 'modernize-make-unique.MakeSmartPtrFunction'
    value: 'std::make_unique'
  - key: 'modernize-make-unique.MakeSmartPtrFunctionHeader'
    value: 'memory'
  - key: 'modernize-use-emplace.ContainersWithPushBack'
    value: '::std::vector;::std::list;::std::deque'
  - key: 'modernize-use-emplace.SmartPointers'
    value: '::std::shared_ptr;::std::unique_ptr;::std::auto_ptr;::std::weak_ptr'
  - key: 'modernize-use-emplace.TupleMakeFunctions'
    value: '::std::make_pair;::std::make_tuple'
  - key: 'modernize-use-emplace.TupleTypes'
    value: '::std::pair;::std::tuple'
  - key: 'modernize-use-equals-default.IgnoreMacros'
    value: 'true'
  - key: 'modernize-use-equals-delete.IgnoreMacros'
    value: 'true'
  # ===== Modern Naming Conventions =====
  # As in previous file but with additions
  # Types use CamelCase (first letter uppercase)
  - key: 'readability-identifier-naming.ClassCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.StructCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TypedefCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TypeAliasCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.AbstractClassCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.UnionCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.InterfaceCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.InterfacePrefix'
    value: 'I'

  # Functions use camelBack (first letter lowercase)
  - key: 'readability-identifier-naming.FunctionCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.MethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ClassMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ConstexprFunctionCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ConstexprMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.VirtualMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PrivateMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ProtectedMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PublicMethodCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalFunctionCase'
    value: 'camelBack'

  # Member variables use camelBack with prefixes
  - key: 'readability-identifier-naming.MemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ClassMemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PrivateMemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PrivateMemberPrefix'
    value: 'm_'
  - key: 'readability-identifier-naming.ProtectedMemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ProtectedMemberPrefix'
    value: 'm_'
  - key: 'readability-identifier-naming.PublicMemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PublicMemberSuffix'
    value: ''

  # Variables use camelBack
  - key: 'readability-identifier-naming.VariableCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.LocalVariableCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalVariableCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalVariablePrefix'
    value: 'g_'
  - key: 'readability-identifier-naming.ConstantCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.LocalConstantCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.StaticConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.StaticVariableCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.StaticVariablePrefix'
    value: 's_'
  - key: 'readability-identifier-naming.ConstantMemberCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ClassConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.ConstexprVariableCase'
    value: 'UPPER_CASE'

  # Parameters use camelBack
  - key: 'readability-identifier-naming.ParameterCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ConstantParameterCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ParameterPackCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.PointerParameterCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.ConstantPointerParameterCase'
    value: 'camelBack'

  # Pointers use camelBack
  - key: 'readability-identifier-naming.LocalPointerCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.LocalConstantPointerCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalPointerCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.GlobalConstantPointerCase'
    value: 'UPPER_CASE'

  # Enums use CamelCase for types, UPPER_CASE for constants (except scoped enum constants)
  - key: 'readability-identifier-naming.EnumCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.EnumConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.ScopedEnumCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.ScopedEnumConstantCase'
    value: 'UPPER_CASE'

  # Template parameters use CamelCase
  - key: 'readability-identifier-naming.TemplateParameterCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TypeTemplateParameterCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.ValueTemplateParameterCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TemplateTemplateParameterCase'
    value: 'CamelCase'

  # Namespaces and macros
  - key: 'readability-identifier-naming.NamespaceCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.InlineNamespaceCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.MacroDefinitionCase'
    value: 'UPPER_CASE'
   # ===== Security Hardening =====
  # Security best practices
  - key: 'cert-dcl16-c.NewSuffixes'
    value: 'L;LL;LU;LLU'
  - key: 'cert-dcl59-cpp.HeaderFileExtensions'
    value: ',h,hh,hpp,hxx'
  - key: 'cert-err09-cpp.CheckThrowTemporaries'
    value: 'true'
  - key: 'cert-err61-cpp.CheckThrowTemporaries'
    value: 'true'
  - key: 'cert-msc32-c.DisallowedSeedTypes'
    value: 'time_t,std::time_t'
  - key: 'cert-msc51-cpp.DisallowedSeedTypes'
    value: 'time_t,std::time_t'
  - key: 'cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField'
    value: 'false'
  - key: 'cert-oop57-cpp.MemCmpNames'
    value: 'memcmp'
  - key: 'cert-oop57-cpp.MemCmpArgs'
    value: '3'
  - key: 'cert-oop57-cpp.MemsetNames'
    value: 'memset'
  - key: 'cert-oop57-cpp.MemsetArgs'
    value: '3'
  # ===== Performance Optimization =====
  # Performance focus options
  - key: 'performance-faster-string-find.StringLikeClasses'
    value: 'std::string,std::string_view'
  - key: 'performance-for-range-copy.WarnOnAllAutoCopies'
    value: 'true'
  - key: 'performance-inefficient-string-concatenation.StrictMode'
    value: 'true'
  - key: 'performance-inefficient-vector-operation.VectorLikeClasses'
    value: '::std::vector'
  - key: 'performance-no-automatic-move.AllowedTypes'
    value: ''
...
